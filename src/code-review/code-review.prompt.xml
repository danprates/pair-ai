<prompt>
  <purpose>Code review according to the diff provided using the pattern informed below.</purpose>

  <instructions>
    <instruction>Return the content in markdown</instruction>
    <instruction>Answer only in English</instruction>
    <instruction>Use simple, clear, objective, and concise language</instruction>
    <instruction>Use the reference-source as the basis of what should be evaluated</instruction>
    <instruction>Provide detailed feedback only on points that WERE NOT ACHIEVED</instruction>
    <instruction>Suggest specific improvements when applicable</instruction>
    <instruction>If there are no points of attention, answer only with the text "No points of attention in the code"</instruction>
    <instruction>Use the example-response as the output format</instruction>
  </instructions>

  <reference-source>
    <design-items>
      <item>Do the interactions between parts of the code make sense?</item>
      <item>Does the change integrate well into the existing system?</item>
      <item>Is it the right time to add this functionality?</item>
    </design-items>
    <functionality-items>
      <item>Does the change achieve what the developer intended?</item>
      <item>Is this beneficial for end-users and future developers?</item>
      <item>Are there any potential concurrency issues, such as deadlocks or race conditions?</item>
    </functionality-items>
    <complexity-items>
      <item>Is the code more complex than it needs to be?</item>
      <item>Can it be simplified to make it easier to understand and maintain?</item>
      <item>Are there signs of over-engineering, with unnecessary features at the moment?</item>
    </complexity-items>
    <tests-items>
      <item>Were adequate tests included (unit, integration, or end-to-end)?</item>
      <item>Are the tests correct, sensible, and useful?</item>
      <item>Do they fail when the code is incorrect and remain valid with future changes?</item>
    </tests-items>
    <code-style-items>
      <item>Are the names of variables, functions, and classes descriptive and clearly communicate their purpose?</item>
      <item>Are there any unnecessary or redundant code sections?</item>
      <item>Are there any console.log or alert statements that should be removed?</item>
    </code-style-items>
    <comments-items>
      <item>Are the comments clear, necessary, and explain the "why" of decisions, not just the "what" of the code?</item>
      <item>Are there outdated comments or TODOs that can be removed?</item>
    </comments-items>
    <commits-items>
      <item>Are the commits clear and concise, with the goal of being easy to understand?</item>
      <item>Do the commits follow conventional commits?</item>
    </commits-items>
    <security-items>
      <item>Is sensitive data hard-coded in any files?</item>
      <item>Are development and test code properly segregated from production environments?</item>
      <item>Is sensitive data secured in memory, storage, and transit?</item>
      <item>Are user passwords or credentials encrypted using a framework or library?</item>
      <item>Is a strong password policy in effect?</item>
      <item>Are authentication and authorization checks performed on every private request?</item>
      <item>Is all user input validated for proper type, length, format, and range?</item>
      <item>Are uploaded files validated for content type, size, file type, and filename?</item>
      <item>Are special characters sanitized before being used in external systems, such as databases?</item>
      <item>Does invalid input trigger properly handled exceptions?</item>
      <item>Do error messages avoid revealing sensitive information?</item>
      <item>Are error messages not user controllable?</item>
      <item>Are all sensitive user actions logged, including details of Where, What, When, Who, and How?</item>
      <item>Are all sensitive system actions logged, including details of Where, What, When, Who, and How?</item>
      <item>Is sensitive information excluded from logs?</item>
      <item>Is user input sanitized and validated before being included in application logs?</item>
    </security-items>
  </reference-source>

  <example-response>
    There are some points of attention in the code:

    **Nomenclature:**
    Variables with generic names
    The variables `e` and `c` are too generic and do not communicate the purpose of the code.
    I suggest renaming `e` to `exchange` and `c` to `chart` for better clarity.

    ```javascript
    // src/index.js
    - const e = new BinanceExchange();
    - const c = new Chart(e);
    + const exchange = new BinanceExchange();
    + const chart = new Chart(exchange);
    ```

    **Functionality:**
    The code is not working correctly.
    There is an inversion in the assignment of `close` and `open` values in the `Candle` class constructor.
    The value passed to `close` is being assigned to `this.open`, and vice versa.
    This can lead to errors in the business logic that depends on these values.
    I suggest correcting the assignment so that the values are assigned correctly:

    ```javascript
    // src/candle.js
    - this.close = open;
    - this.open = close;
    + this.close = close;
    + this.open = open;
    ```

    With these changes, the code will be clearer and easier to understand for other developers.
  </example-response>

  <diff>{{ content }}</diff>
</prompt>